
# THIS IS THE CONFIGURATION FILE LIKE OTHER LANGUAGE OR FRAMEWORK
# WE USE WITH JUST KEY AND VALUE PAIR

#SERVER PORT CHANGE OR SET by default 8080
#server.port=8080

#FakeStore config variables
fakestore.api.url= https://fakestoreapi.com
fakestore.api.paths.products= /products
fakestore.api.paths.categories= /categories

# NOTE 35: CREATE MYSQL CONNECTION
# NOTE 74: make ddl- auto to "null" so that spring Jpa will not create any automatic
        #table creation we will use JPA buddy for
#NOTE 78: change update to validate will ensure that the table must be present when you access data from the
# table other wise Client will surprise as it was not give any compilation error during implementation
#NOTE 79 : change "update" to "none" for jpa buddy can do db migration and necessary update in db
#spring.jpa.hibernate.ddl-null=update
spring.jpa.hibernate.ddl-auto=update
spring.datasource.url=jdbc:mysql://localhost:3306/productservice
spring.datasource.username=productservice
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.show-sql: true

#spring.security.oauth2.resourceserver.jwt.issuer-uri=http://userservice-final-2-env.eu-north-1.elasticbeanstalk.com/
##spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:4000/
#logging.level.org.springframework.security=trace
#spring.redis.host=localhost
#spring.redis.port=6379

#Eureka Service Discovery implement , here Product Service act as Client so both Eureka values are true
#server.port=3030
#NOTE 121: ${SERVERPORT} THIS IS USED TO BIND THE PORT NO. TO EACH OF THE INSTANCES OF PRODUCT MICROSERVICE
# WHICH RUN AND REGISTER THEM SELVES IN SERVICE DISCOVERY OR EUREKA SERVER AND ACT AS CLIENT WHICH WILL
#INTEREACT WITH SERVICE DISCOVERY MICROSERVICE FOR KNOWING THE OTHER MICROSERVICE INSTANCES PORT AND IP
#ADDRESS AND USING THAT CLENT SIDE LOAD BALANCER WILL ADD PRODUCT SERVICE SIDE SO THAT IF WE CALL USER SERVICE
#THEN THERE SHOULD NOT BE A LOAD OVERWHELMED TO A PARTICULAR INSTANCE/ OF SERVERS OF USERSERVICE TO INTERECET WITH
# PRODUCT SERVICE
server.port=${SERVERPORT}
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true
spring.application.name=ProductService
eureka.client.service-url.defaultZone=http://localhost:8761/eureka



